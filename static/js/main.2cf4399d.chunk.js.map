{"version":3,"sources":["components/TodoItem.js","App.js","reportWebVitals.js","index.js"],"names":["TodoItem","item","toggleCompletion","status","completed","className","text","onClick","App","props","useState","items","todoItems","setTodoItems","newTodoItem","setNewTodoItem","map","id","todoItem","find","n","changedItem","toggleTodoCompletion","onSubmit","event","preventDefault","newTodo","length","concat","value","onChange","target","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAaeA,EAXE,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAClBC,EAASF,EAAKG,UAAY,WAAa,SAE7C,OACE,qBAAIC,UAAWJ,EAAKG,UAAY,YAAc,KAA9C,UACGH,EAAKK,KACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCuC3BK,G,MA3CH,SAACC,GACX,MAAkCC,mBAASD,EAAME,OAAjD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCH,mBAAS,IAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KAwBA,OACE,gCACE,0CACA,6BACGH,EAAUI,KAAI,SAAAf,GAAI,OAAI,cAAC,EAAD,CAAwBA,KAAMA,EAAMC,iBAAkB,kBAXtD,SAAAe,GAC3B,IAAMC,EAAWN,EAAUO,MAAK,SAAAC,GAAC,OAAIA,EAAEH,KAAOA,KACxCI,EAAW,2BAAQH,GAAR,IAAkBd,WAAYc,EAASd,YACxDS,EAAaD,EAAUI,KAAI,SAAAf,GAAI,OAAIA,EAAKgB,KAAOA,EAAKhB,EAAOoB,MAQ4BC,CAAqBrB,EAAKgB,MAAvEhB,EAAKgB,SAE7C,uBAAMM,SA5BU,SAACC,GACnBA,EAAMC,iBACN,IAAMC,EAAU,CACdT,GAAIL,EAAUe,OAAS,EACvBrB,KAAMQ,EACNV,WAAW,GAEbS,EAAaD,EAAUgB,OAAOF,IAC9BX,EAAe,KAoBb,UACE,uBACEc,MAAOf,EACPgB,SApBqB,SAACN,GAC5BT,EAAeS,EAAMO,OAAOF,UAqBxB,wBAAQG,KAAK,SAAb,0BC7BOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKjC,MANK,CAAC,CAAEM,GAAI,EAAGX,KAAM,OAAQF,WAAW,GAClC,CAAEa,GAAI,EAAGX,KAAM,QAASF,WAAW,GACnC,CAAEa,GAAI,EAAGX,KAAM,QAASF,WAAW,QAMhDyC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2cf4399d.chunk.js","sourcesContent":["import React from 'react'\n\nconst TodoItem = ({ item, toggleCompletion }) => {\n  const status = item.completed ? \"unfinish\" : \"finish\"\n\n  return (\n    <li className={item.completed ? \"completed\" : null}>\n      {item.text}\n      <button onClick={toggleCompletion}>{status}</button>\n    </li >\n  )\n}\n\nexport default TodoItem\n","import React, {useState} from 'react';\nimport TodoItem from './components/TodoItem'\nimport './App.css';\n\nconst App = (props) => {\n  const [todoItems, setTodoItems] = useState(props.items)\n  const [newTodoItem, setNewTodoItem] = useState('')\n\n  const addTodoItem = (event) => {\n    event.preventDefault()\n    const newTodo = {\n      id: todoItems.length + 1,\n      text: newTodoItem,\n      completed: false,\n    }\n    setTodoItems(todoItems.concat(newTodo))\n    setNewTodoItem('')\n  }\n\n  const handleTodoItemChange = (event) => {\n    setNewTodoItem(event.target.value)\n  }\n\n  const toggleTodoCompletion = id => {\n    const todoItem = todoItems.find(n => n.id === id)\n    const changedItem = { ...todoItem, completed: !todoItem.completed }\n    setTodoItems(todoItems.map(item => item.id !== id ? item : changedItem))\n  }\n\n\n  return (\n    <div>\n      <h1>TodoList</h1>\n      <ul>\n        {todoItems.map(item => <TodoItem key={item.id} item={item} toggleCompletion={() => toggleTodoCompletion(item.id)} />)}\n      </ul>\n      <form onSubmit={addTodoItem}>\n        <input\n          value={newTodoItem}\n          onChange={handleTodoItemChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst items = [{ id: 1, text: \"test\", completed: false }, \n               { id: 2, text: \"test2\", completed: false }, \n               { id: 3, text: \"test3\", completed: false }]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App items={items}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}